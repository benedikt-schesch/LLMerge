PROMPT:
You are a semantic merge conflict resolution expert. Below is a snippet of code with surrounding context that includes a merge conflict.
Return the entire snippet (including full context) in markdown code fences as provided, make sure you do not modify the context at all and preserve the spacing as is.
Think in terms of intent and semantics that both sides of the merge are trying to achieve.
If you are not sure on how to resolve the conflict or if the intent is ambiguous, please return the same snippet with the conflict.
Here is the code snippet:
```java
    public boolean isEmpty() {
        return data.isEmpty();
    }

    @Override
<<<<<<< HEAD
    public DoubleColumn appendCell(String object) {
=======
    public void appendCell(final String object) {
>>>>>>> 6d28266a122a38df7acdddba3cb08642e730dfea
        try {
            append(convert(object));
        } catch (final NumberFormatException e) {
            throw new NumberFormatException(name() + ": " + e.getMessage());
        }

```

RESPONSE:
```java
    public boolean isEmpty() {
        return data.isEmpty();
    }

    @Override
    public void appendCell(final String object) {
        try {
            append(convert(object));
        } catch (final NumberFormatException e) {
            throw new NumberFormatException(name() + ": " + e.getMessage());
        }

```

EXPECTED:
    public boolean isEmpty() {
        return data.isEmpty();
    }

    @Override
    public DoubleColumn appendCell(final String object) {
        try {
            append(convert(object));
        } catch (final NumberFormatException e) {
            throw new NumberFormatException(name() + ": " + e.getMessage());
        }
