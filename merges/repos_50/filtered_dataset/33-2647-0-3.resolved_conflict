              TPU_TYPE, TPU_SOFTWARE_VERSION);

      verify(mockTpuClient, times(1))
              .createNodeAsync(any(CreateNodeRequest.class));
      verify(mockFuture, times(1)).get();
      assertEquals(returnedNode, mockNode);
    }
  }

  @Test
  public void testCreateTpuVmWithStartupScript() throws Exception {
    try (MockedStatic<TpuClient> mockedTpuClient = mockStatic(TpuClient.class)) {
      Node mockNode = Node.newBuilder()
              .setName("nodeName")
              .setAcceleratorType("acceleratorType")
              .setRuntimeVersion("runtimeVersion")
              .build();

      TpuClient mockTpuClient = mock(TpuClient.class);
      OperationFuture mockFuture = mock(OperationFuture.class);

      mockedTpuClient.when(TpuClient::create).thenReturn(mockTpuClient);
      when(mockTpuClient.createNodeAsync(any(CreateNodeRequest.class)))
              .thenReturn(mockFuture);
      when(mockFuture.get()).thenReturn(mockNode);

      Node returnedNode = CreateTpuVmWithStartupScript.createTpuVmWithStartupScript(
              PROJECT_ID, ZONE, NODE_NAME,
              TPU_TYPE, TPU_SOFTWARE_VERSION);

      verify(mockTpuClient, times(1))
              .createNodeAsync(any(CreateNodeRequest.class));
      verify(mockFuture, times(1)).get();
      assertEquals(returnedNode.getName(), mockNode.getName());
      assertEquals(returnedNode.getAcceleratorType(), mockNode.getAcceleratorType());
      assertEquals(returnedNode.getRuntimeVersion(), mockNode.getRuntimeVersion());
    }
  }
}
